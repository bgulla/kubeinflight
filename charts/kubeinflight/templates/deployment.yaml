apiVersion: apps/v1
kind: Deployment
metadata:
  name: piaware
  namespace: {{ .Values.namespace }}
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: apps.deployment-flightaware-piaware
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: apps.deployment-flightaware-piaware
        # app: prometheus-server
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: sdr
                operator: In
                values:
                - "true"
      containers:
      - envFrom:
        - configMapRef:
            name: flightaware-env-file
            optional: false
        image: {{ .Values.piaware.image.repository }}:{{ .Values.piaware.image.tag }}
        imagePullPolicy: {{ .Values.piaware.image.pullPolicy }}
        name: piaware
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        resources: {}
        securityContext:
          allowPrivilegeEscalation: true
          capabilities: {}
          privileged: true
          readOnlyRootFilesystem: false
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /dev/bus/usb
          name: usb
      {{ if .Values.dump1090exporter.enabled }}
      - args:
        - --resource-path=http://localhost:8080/data
        - --latitude={{ .Values.lat }}
        - --longitude={{ .Values.long }}
        image: {{ .Values.dump1090exporter.image.repository }}:{{ .Values.dump1090exporter.image.tag }}
        imagePullPolicy: {{ default "Always" .Values.dump1090exporter.image.pullPolicy }}
        name: dump1090-exporter
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        env:
          - name: RESOURCE_PATH
            value: "http://localhost:8080/data"
      {{ end }}
      {{ if .Values.fr24feed.enabled }}
      - image: {{ .Values.fr24feed.image.repository }}:{{ .Values.fr24feed.image.tag }}
        imagePullPolicy: {{ default "Always" .Values.fr24feed.image.pullPolicy }}
        name: fr24feed
        envFrom:
        - configMapRef:
            name: flightradar-env-file
            optional: false
        env:
          - name: MLAT
            value: {{ default "yes" .Values.fr24feed.mlat | quote }}
          - name: BEASTHOST
            value: {{ default "http-nodeport.flightaware.svc" .Values.fr24feed.beasthost | quote }}
          - name: BEASTPORT
            value: {{ default "30005" .Values.fr24feed.beastport | quote }}
      {{ end }}
      {{ if .Values.grafana.enabled }}
      - image: {{ default "grafana/grafana" .Values.grafana.image.repository }}:{{ default "latest" .Values.grafana.image.tag }}
        imagePullPolicy: {{ default "Always" .Values.grafana.image.pullPolicy }}
        name: grafana
        env:
          - name: GF_AUTH_BASIC_ENABLED
            value: {{ default "true" .Values.grafana.auth.basic.enabled | quote }}
          - name: GF_AUTH_ANONYMOUS_ENABLED
            value: {{ default "true" .Values.grafana.auth.anonymous.enabled | quote }}
        volumeMounts:
          - mountPath: /etc/grafana/provisioning/datasources
            name: grafana-datasources
            readOnly: false
          - name: grafana-config
            mountPath: /etc/grafana/provisioning/dashboards/dashboardConfig.yaml
            subPath: dashboardConfig.yaml
          - mountPath: /var/lib/grafana/dashboards/dump1090-export.json
            name: dashboard-templates
            subPath: dump1090-export.json
      {{ end }}
      {{ if .Values.prometheus.enabled }}
      - image: {{ default "prom/prometheus" .Values.prometheus.image.repository }}:{{ default "latest" .Values.prometheus.image.tag }}
        imagePullPolicy: {{ default "Always" .Values.prometheus.image.pullPolicy }}
        name: prometheus
        args:
          - "--config.file=/etc/prometheus/prometheus.yml"
          - "--storage.tsdb.path=/prometheus/"
        ports:
          - containerPort: 9090
        volumeMounts:
          - name: prometheus-config-volume
            mountPath: /etc/prometheus/
      {{- if .Values.prometheus.persistence.enabled }}
          - name: prometheus-data
            mountPath: /prometheus/
      {{ end }}  
      {{ end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      {{ if .Values.prometheus.enabled }}
      - name: prometheus-config-volume
        configMap:
          defaultMode: 420
          name: prometheus-server-conf 
      {{ end }}
      {{ if .Values.prometheus.persistence.enabled }}
      - name: prometheus-data
        persistentVolumeClaim:
            claimName: prometheus-data-pvc
      {{ end }}

      {{ if .Values.grafana.enabled }}
      - name: grafana-datasources
        configMap:
            defaultMode: 420
            name: grafana-datasources
      - name: grafana-config
        configMap:
          name: grafana-config
          items:
          - key: dashboardConfig.yaml
            path: dashboardConfig.yaml
      - name: dashboard-templates
        configMap:
          defaultMode: 420
          items:
          - key: dump1090-export.json
            path: dump1090-export.json
          name: dump1090-dashboard
      {{ end }}
      - hostPath:
          path: /dev/bus/usb
          type: ""
        name: usb